<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings - User Profile</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="professor-styles.css">
  <style>
    

    /* Main Content */
    .settings-section {
      margin-bottom: 40px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      background-color: white;
      overflow: hidden;
    }

    .section-title {
      background-color: #f8f9fa;
      padding: 15px 20px;
      border-bottom: 1px solid #eee;
    }

    .section-title h2 {
      font-size: 1.5rem;
      color: #333;
      margin: 0;
      display: flex;
      align-items: center;
    }

    .section-title h2 i {
      margin-right: 10px;
      color: #007bff;
    }

    .section-content {
      padding: 20px;
    }

    .btn {
      background-color: #007bff;
      color: #fff;
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-align: center;
      transition: background-color 0.2s, transform 0.1s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    .btn i {
      margin-right: 8px;
    }

    .btn:hover {
      background-color: #0056b3;
      transform: translateY(-1px);
    }

    .btn:active {
      transform: translateY(1px);
    }

    .btn-danger {
      background-color: #dc3545;
    }

    .btn-danger:hover {
      background-color: #c82333;
    }

    /* Popup Styling */
    .popup {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
      animation: fadeIn 0.3s;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .popup-content {
      position: relative;
      background-color: #fff;
      padding: 30px;
      border-radius: 8px;
      margin: 6% auto;
      width: 40%;
      max-width: 600px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      animation: slideDown 0.3s;
    }

    @keyframes slideDown {
      from { transform: translateY(-30px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    .popup .close-btn {
      color: #aaa;
      font-size: 28px;
      font-weight: bold;
      position: absolute;
      top: 10px;
      right: 15px;
      transition: color 0.2s;
    }

    .popup .close-btn:hover,
    .popup .close-btn:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }

    .profile-image-container {
      text-align: center;
      margin-bottom: 30px;
      position: relative;
    }

    .profile-image-container img {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid #f8f9fa;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      image-rendering: -webkit-optimize-contrast; /* Improve image sharpness */
      image-rendering: crisp-edges;
    }

    .edit-overlay {
      position: absolute;
      bottom: 0;
      right: calc(50% - 60px);
      width: 30px;
      height: 30px;
      background-color: #007bff;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: white;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .edit-overlay:hover {
      background-color: #0056b3;
    }

    #profile-picture {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      opacity: 0;
      cursor: pointer;
    }

    .input-group {
      margin-bottom: 25px;
    }

    .input-group label {
      display: block;
      font-weight: 500;
      margin-bottom: 8px;
      color: #444;
    }

    .input-group input,
    .input-group textarea,
    .input-group select {
      width: 100%;
      padding: 12px;
      font-size: 1rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      transition: border-color 0.3s;
      font-family: 'Poppins', sans-serif;
    }

    .input-group input:focus,
    .input-group textarea:focus,
    .input-group select:focus {
      border-color: #007bff;
      outline: none;
      box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .input-group textarea {
      resize: vertical;
      height: 120px;
      line-height: 1.5;
    }

    .input-group small {
      display: block;
      margin-top: 5px;
      color: #6c757d;
      font-size: 0.875rem;
    }

    .checkbox-group {
      display: flex;
      align-items: center;
      margin-bottom: 15px;
    }

    .checkbox-group input[type="checkbox"] {
      margin-right: 10px;
      width: auto;
    }

    /* Notification for action feedback */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      background-color: #4CAF50;
      color: white;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      display: none;
      z-index: 1001;
      animation: slideIn 0.3s, fadeOut 0.5s 2.5s;
      opacity: 0;
    }

    @keyframes slideIn {
      from { transform: translateX(30px); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }

    @keyframes fadeOut {
      from { opacity: 1; }
      to { opacity: 0; }
    }

    /* Responsive design */
    @media (max-width: 992px) {
      .popup-content {
        width: 60%;
      }
    }

    @media (max-width: 768px) {
      .popup-content {
        width: 85%;
        margin: 10% auto;
        padding: 25px;
      }
      
      .content {
        padding: 15px;
      }
    }

  </style>
</head>
<body>
    <!-- Placeholder for Topbar -->
  <div id="topbar-container"></div>
  
  <div class="dashboard-container">
    <!-- Placeholder for Sidebar -->
    <div id="sidebar-container"></div>
        
    <!-- Main Content -->
    <main class="content">
      <h1>Settings</h1>
      
      <section class="settings-section">
        <div class="section-title">
          <h2><i class="fas fa-user"></i> Profile</h2>
        </div>
        <div class="section-content">
          <p>Update your basic information, headline, and profile picture.</p>
          <button class="btn" onclick="openProfilePopup()"><i class="fas fa-pen"></i> Edit Profile</button>
        </div>
      </section>

      <section class="settings-section">
        <div class="section-title">
          <h2><i class="fas fa-lock"></i> Account Security</h2>
        </div>
        <div class="section-content">
          <p>Manage your password, two-factor authentication, and security settings.</p>
          <button class="btn" onclick="openPasswordPopup()"><i class="fas fa-key"></i> Change Password</button>
        </div>
      </section>

      <section class="settings-section">
        <div class="section-title">
          <h2><i class="fas fa-bell"></i> Notifications</h2>
        </div>
        <div class="section-content">
          <p>Configure email notifications and alerts for class updates, announcements, and grades.</p>
          <button class="btn" onclick="openNotificationsPopup()"><i class="fas fa-cog"></i> Notification Settings</button>
        </div>
      </section>

      <section class="settings-section">
        <div class="section-title">
          <h2><i class="fas fa-shield-alt"></i> Privacy</h2>
        </div>
        <div class="section-content">
          <p>Control what information is visible to others in courses and public profile.</p>
          <button class="btn" onclick="openPrivacyPopup()"><i class="fas fa-user-shield"></i> Privacy Settings</button>
        </div>
      </section>

      <section class="settings-section">
        <div class="section-title">
          <h2><i class="fas fa-user-times"></i> Account Management</h2>
        </div>
        <div class="section-content">
          <p>Permanently delete your account and all associated data.</p>
          <button class="btn btn-danger" onclick="openDeleteAccountPopup()"><i class="fas fa-trash"></i> Delete Account</button>
        </div>
      </section>
    </main>
  </div>

  <!-- Profile Settings Popup -->
  <div id="profile-settings-popup" class="popup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup('profile-settings-popup')">&times;</span>
      <h2>Edit Profile</h2>
      
      <div id="profile-image-container" class="profile-image-container">
        <!-- Profile image will be inserted here -->
        <div class="edit-overlay" onclick="document.getElementById('profile-picture').click()">
          <i class="fas fa-camera"></i>
          <input type="file" id="profile-picture" accept="image/*" onchange="previewProfilePicture(event)">
        </div>
      </div>

      <div class="input-group">
        <label for="full-name">Full Name</label>
        <input type="text" id="full-name" placeholder="Enter your full name">
      </div>

      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" placeholder="Enter your email address">
      </div>

      <div class="input-group">
        <label for="bio">Bio</label>
        <textarea id="bio" placeholder="Tell us a bit about yourself"></textarea>
        <small>Briefly describe yourself, your interests, or your teaching/learning style.</small>
      </div>

      <button class="btn" onclick="saveProfile()"><i class="fas fa-save"></i> Save Changes</button>
    </div>
  </div>

  <!-- Password Change Popup -->
  <div id="password-popup" class="popup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup('password-popup')">&times;</span>
      <h2>Change Password</h2>
      
      <div class="input-group">
        <label for="current-password">Current Password</label>
        <input type="password" id="current-password" placeholder="Enter your current password">
      </div>

      <div class="input-group">
        <label for="new-password">New Password</label>
        <input type="password" id="new-password" placeholder="Enter your new password">
        <small>Must be at least 8 characters long</small>
      </div>

      <div class="input-group">
        <label for="confirm-password">Confirm New Password</label>
        <input type="password" id="confirm-password" placeholder="Confirm your new password">
      </div>

      <button class="btn" onclick="changePassword()"><i class="fas fa-key"></i> Change Password</button>
    </div>
  </div>

  <!-- Notification Settings Popup -->
  <div id="notifications-popup" class="popup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup('notifications-popup')">&times;</span>
      <h2>Notification Settings</h2>
      
      <div class="checkbox-group">
        <input type="checkbox" id="email-notifications" checked>
        <label for="email-notifications">Receive email notifications</label>
      </div>
      
      <div class="input-group">
        <label for="display-theme">Display Theme</label>
        <select id="display-theme">
          <option value="light">Light</option>
          <option value="dark">Dark</option>
          <option value="system">System Default</option>
        </select>
      </div>

      <div class="input-group">
        <label for="language-preference">Language Preference</label>
        <select id="language-preference">
          <option value="en">English</option>
          <option value="es">Spanish</option>
          <option value="fr">French</option>
          <option value="de">German</option>
          <option value="pt">Portuguese</option>
          <option value="hi">Hindi</option>
        </select>
      </div>

      <button class="btn" onclick="saveNotificationSettings()"><i class="fas fa-save"></i> Save Settings</button>
    </div>
  </div>

  <!-- Privacy Settings Popup -->
  <div id="privacy-popup" class="popup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup('privacy-popup')">&times;</span>
      <h2>Privacy Settings</h2>
      
      <div class="input-group">
        <label for="profile-visibility">Profile Visibility</label>
        <select id="profile-visibility">
          <option value="public">Public - Anyone can view your profile</option>
          <option value="courses">Courses Only - Only people in your courses can view your profile</option>
          <option value="private">Private - Only you can view your profile</option>
        </select>
      </div>

      <div class="input-group">
        <label for="activity-visibility">Activity Visibility</label>
        <select id="activity-visibility">
          <option value="public">Public - Anyone can see your activity</option>
          <option value="followers">Followers - Only people following you can see your activity</option>
          <option value="private">Private - Only you can see your activity</option>
        </select>
      </div>

      <button class="btn" onclick="savePrivacySettings()"><i class="fas fa-save"></i> Save Settings</button>
    </div>
  </div>

  <!-- Delete Account Popup -->
  <div id="delete-account-popup" class="popup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup('delete-account-popup')">&times;</span>
      <h2>Delete Account</h2>
      
      <p style="margin-bottom: 20px; color: #dc3545;"><i class="fas fa-exclamation-triangle"></i> Warning: This action cannot be undone. All your data will be permanently deleted.</p>
      
      <div class="input-group">
        <label for="delete-password">Enter Your Password to Confirm</label>
        <input type="password" id="delete-password" placeholder="Enter your password">
      </div>

      <button class="btn btn-danger" onclick="deleteAccount()"><i class="fas fa-trash"></i> Permanently Delete Account</button>
    </div>
  </div>

  <!-- Notification -->
  <div id="notification" class="notification"></div>
  <script src="authorize.js"></script>
  <script src="load-components.js"></script>
  
  <script>
    // Function to load user profile data and display profile picture or avatar
    function loadProfileData() {
      fetch("/get-info", { headers: { "Content-Type": "application/json" } })
        .then(response => response.json())
        .then(data => {
          // Create profile image element
          let profileImg = document.createElement("img");

          if (Object.keys(data).length === 0 || !data.user.profile_picture) {
            const initials = getInitials(data.user.full_name);
            profileImg.src = generateAvatar(initials);
            
          } else {
            profileImg.src = "../" + data.user.profile_picture.replace("./", "");
          }

          profileImg.alt = "Profile Picture";
          profileImg.id = "profile-preview";
          
          // Insert image before the edit overlay
          const profileImageContainer = document.getElementById("profile-image-container");
          const editOverlay = profileImageContainer.querySelector(".edit-overlay");
          profileImageContainer.insertBefore(profileImg, editOverlay);

          // Fill user data in the fields
          document.getElementById("full-name").value = data.user.full_name;
          document.getElementById("email").value = data.user.email;
          document.getElementById("bio").value = data.user.bio || '';
        })
        .catch(error => {
          console.error("Error loading user data:", error);
          showNotification("Unable to load profile data", "error");
        });
    }

    // Load notification settings
    function loadNotificationSettings() {
      fetch("/notification-settings", { 
        method: "GET",
        headers: { "Content-Type": "application/json" } 
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById("email-notifications").checked = data.email_notifications;
        document.getElementById("display-theme").value = data.display_theme;
        document.getElementById("language-preference").value = data.language_preference;
      })
      .catch(error => {
        console.error("Error loading notification settings:", error);
        showNotification("Unable to load notification settings", "error");
      });
    }

    // Load privacy settings
    function loadPrivacySettings() {
      fetch("/privacy-settings", { 
        method: "GET",
        headers: { "Content-Type": "application/json" } 
      })
      .then(response => response.json())
      .then(data => {
        document.getElementById("profile-visibility").value = data.profile_visibility;
        document.getElementById("activity-visibility").value = data.activity_visibility;
      })
      .catch(error => {
        console.error("Error loading privacy settings:", error);
        showNotification("Unable to load privacy settings", "error");
      });
    }

    // Open popups
    function openProfilePopup() {
      document.getElementById("profile-settings-popup").style.display = "block";
      // Remove existing profile image before loading new data
      const profilePreview = document.getElementById("profile-preview");
      if (profilePreview) {
        profilePreview.remove();
      }
      loadProfileData();
    }

    function openPasswordPopup() {
      document.getElementById("password-popup").style.display = "block";
    }

    function openNotificationsPopup() {
      document.getElementById("notifications-popup").style.display = "block";
      loadNotificationSettings();
    }

    function openPrivacyPopup() {
      document.getElementById("privacy-popup").style.display = "block";
      loadPrivacySettings();
    }

    function openDeleteAccountPopup() {
      document.getElementById("delete-account-popup").style.display = "block";
    }

    // Close popup
    function closePopup(popupId) {
      document.getElementById(popupId).style.display = "none";
      
      // Clear inputs for security
      if (popupId === 'password-popup') {
        document.getElementById("current-password").value = '';
        document.getElementById("new-password").value = '';
        document.getElementById("confirm-password").value = '';
      }
      
      if (popupId === 'delete-account-popup') {
        document.getElementById("delete-password").value = '';
      }
      
      if (popupId === 'profile-settings-popup') {
        document.getElementById("profile-picture").value = ''; // Reset file input
      }
    }

    // Preview the selected profile picture
    function previewProfilePicture(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      // Validate file type
      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/jpg'];
      if (!validTypes.includes(file.type)) {
        showNotification("Please select a valid image file (JPEG, PNG, or GIF)", "error");
        return;
      }
      
      // Validate file size (max 5MB)
      if (file.size > 5 * 1024 * 1024) {
        showNotification("Image size should be less than 5MB", "error");
        return;
      }
      
      const reader = new FileReader();
      reader.onload = function(e) {
        const profilePreview = document.getElementById("profile-preview");
        if (profilePreview) {
          profilePreview.src = e.target.result;
        } else {
          const newImage = document.createElement("img");
          newImage.src = e.target.result;
          newImage.alt = "Profile Picture";
          newImage.id = "profile-preview";
          
          const profileImageContainer = document.getElementById("profile-image-container");
          const editOverlay = profileImageContainer.querySelector(".edit-overlay");
          profileImageContainer.insertBefore(newImage, editOverlay);
        }
      };
      reader.readAsDataURL(file);
    }

    // Show notification
    function showNotification(message, type = "success") {
      const notification = document.getElementById("notification");
      notification.textContent = message;
      notification.style.display = "block";
      notification.style.opacity = "1";
      
      if (type === "error") {
        notification.style.backgroundColor = "#dc3545";
      } else {
        notification.style.backgroundColor = "#4CAF50";
      }
      
      // Hide notification after 3 seconds
      setTimeout(() => {
        notification.style.opacity = "0";
        setTimeout(() => {
          notification.style.display = "none";
        }, 500);
      }, 3000);
    }

    // Save profile
    function saveProfile() {
      const fullName = document.getElementById("full-name").value;
      const email = document.getElementById("email").value;
      const bio = document.getElementById("bio").value;
      const profilePicture = document.getElementById("profile-picture").files[0];

      // Validate required fields
      if (!fullName.trim()) {
        showNotification("Full name is required", "error");
        return;
      }
      
      if (!email.trim()) {
        showNotification("Email is required", "error");
        return;
      }
      
      // Basic email validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        showNotification("Please enter a valid email address", "error");
        return;
      }

      const formData = new FormData();
      formData.append("full_name", fullName);
      formData.append("email", email);
      formData.append("bio", bio);

      if (profilePicture) {
        formData.append("profile_picture", profilePicture);
      }

      // Show loading state
      const saveButton = document.querySelector("#profile-settings-popup .btn");
      const originalButtonText = saveButton.innerHTML;
      saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      saveButton.disabled = true;

      fetch("/update-profile", {
        method: "POST",
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Server error");
        }
        return response.json();
      })
      .then(data => {
        showNotification("Profile updated successfully!");
        closePopup("profile-settings-popup");
        // Reload page after a short delay to show notification
        setTimeout(() => {
          location.reload();
        }, 1000);
      })
      .catch(error => {
        console.error("Error saving profile:", error);
        showNotification("Error saving profile. Please try again.", "error");
        // Reset button state
        saveButton.innerHTML = originalButtonText;
        saveButton.disabled = false;
      });
    }

    // Change password
    function changePassword() {
      const currentPassword = document.getElementById("current-password").value;
      const newPassword = document.getElementById("new-password").value;
      const confirmPassword = document.getElementById("confirm-password").value;

      // Validate required fields
      if (!currentPassword) {
        showNotification("Current password is required", "error");
        return;
      }
      
      if (!newPassword) {
        showNotification("New password is required", "error");
        return;
      }
      
      if (!confirmPassword) {
        showNotification("Please confirm your new password", "error");
        return;
      }
      
      // Validate password length
      if (newPassword.length < 8) {
        showNotification("Password must be at least 8 characters long", "error");
        return;
      }
      
      // Validate password match
      if (newPassword !== confirmPassword) {
        showNotification("New passwords do not match", "error");
        return;
      }

      // Show loading state
      const saveButton = document.querySelector("#password-popup .btn");
      const originalButtonText = saveButton.innerHTML;
      saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
      saveButton.disabled = true;

      const formData = new FormData();
      formData.append("current_password", currentPassword);
      formData.append("new_password", newPassword);
      formData.append("confirm_password", confirmPassword);

      fetch("/change-password", {
        method: "POST",
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.detail || "Server error");
          });
        }
        return response.json();
      })
      .then(data => {
        showNotification("Password changed successfully!");
        closePopup("password-popup");
      })
      .catch(error => {
        console.error("Error changing password:", error);
        showNotification(error.message || "Error changing password. Please try again.", "error");
        // Reset button state
        saveButton.innerHTML = originalButtonText;
        saveButton.disabled = false;
      });
    }

    // Save notification settings
    function saveNotificationSettings() {
      const emailNotifications = document.getElementById("email-notifications").checked;
      const displayTheme = document.getElementById("display-theme").value;
      const languagePreference = document.getElementById("language-preference").value;

      // Show loading state
      const saveButton = document.querySelector("#notifications-popup .btn");
      const originalButtonText = saveButton.innerHTML;
      saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      saveButton.disabled = true;

      const formData = new FormData();
      formData.append("email_notifications", emailNotifications);
      formData.append("display_theme", displayTheme);
      formData.append("language_preference", languagePreference);

      fetch("/notification-settings", {
        method: "POST",
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Server error");
        }
        return response.json();
      })
      .then(data => {
        showNotification("Notification settings updated successfully!");
        closePopup("notifications-popup");
      })
      .catch(error => {
        console.error("Error saving notification settings:", error);
        showNotification("Error saving settings. Please try again.", "error");
        // Reset button state
        saveButton.innerHTML = originalButtonText;
        saveButton.disabled = false;
      });
    }

    // Save privacy settings
    function savePrivacySettings() {
      const profileVisibility = document.getElementById("profile-visibility").value;
      const activityVisibility = document.getElementById("activity-visibility").value;

      // Show loading state
      const saveButton = document.querySelector("#privacy-popup .btn");
      const originalButtonText = saveButton.innerHTML;
      saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      saveButton.disabled = true;

      const formData = new FormData();
      formData.append("profile_visibility", profileVisibility);
      formData.append("activity_visibility", activityVisibility);

      fetch("/privacy-settings", {
        method: "POST",
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          throw new Error("Server error");
        }
        return response.json();
      })
      .then(data => {
        showNotification("Privacy settings updated successfully!");
        closePopup("privacy-popup");
      })
      .catch(error => {
        console.error("Error saving privacy settings:", error);
        showNotification("Error saving settings. Please try again.", "error");
        // Reset button state
        saveButton.innerHTML = originalButtonText;
        saveButton.disabled = false;
      });
    }

    // Delete account
    function deleteAccount() {
      const password = document.getElementById("delete-password").value;

      if (!password) {
        showNotification("Please enter your password to confirm", "error");
        return;
      }

      // Double confirm
      if (!confirm("Are you sure you want to permanently delete your account? This action cannot be undone.")) {
        return;
      }

      // Show loading state
      const deleteButton = document.querySelector("#delete-account-popup .btn");
      const originalButtonText = deleteButton.innerHTML;
      deleteButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
      deleteButton.disabled = true;

      const formData = new FormData();
      formData.append("password", password);

      fetch("/delete-account", {
        method: "POST",
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.detail || "Server error");
          });
        }
        return response.json();
      })
      .then(data => {
        showNotification("Account deleted successfully. Redirecting to login...");
        setTimeout(() => {
          window.location.href = "/static/login.htm";
        }, 2000);
      })
      .catch(error => {
        console.error("Error deleting account:", error);
        showNotification(error.message || "Error deleting account. Please try again.", "error");
        // Reset button state
        deleteButton.innerHTML = originalButtonText;
        deleteButton.disabled = false;
      });
    }

    // Close popup when clicking outside
    window.onclick = function(event) {
      const popups = document.querySelectorAll(".popup");
      popups.forEach(popup => {
        if (event.target === popup) {
          popup.style.display = "none";
        }
      });
    };

    // Allow ESC key to close popup
    document.addEventListener("keydown", function(event) {
      if (event.key === "Escape") {
        const popups = document.querySelectorAll(".popup");
        popups.forEach(popup => {
          popup.style.display = "none";
        });
      }
    });
  </script>
  
</body>
</html> 